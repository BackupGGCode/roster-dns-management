#!/usr/bin/python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""make acls for Roster"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '#TRUNK#'


import cPickle
import os
import sys
import getpass
import datetime

from optparse import OptionParser

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib


def main(args):
  """Collects command line arguments.

  Inputs:
    args: list of arguments from the command line
  """
  parser = OptionParser(version='%%prog (Roster %s)' % __version__)

  parser.add_option('-U', '--roster-user', action='store', dest='roster_user',
                    help='Roster username.', metavar='<roster-user>',
                    default=None)
  parser.add_option('-a', '--action', action='store', dest='action',
                    help='Specify action run on Roster.', metavar='<action>',
                    default=None)
  parser.add_option('--success', action='store', dest='success',
                    help='Integer 1 or 0 of action success.',
                    metavar='<success>', default=None)
  parser.add_option('-b', '--begin-time', action='store', dest='begin_time',
                    help='Beginning time stamp in format YYYY-MM-DDThh:mm:ss.',
                    metavar='<begin-time>', default=None)
  parser.add_option('-e', '--end-time', action='store', dest='end_time',
                    help='Ending time stamp in format YYYY-MM-DDThh:mm:ss.',
                    metavar='<end-time>', default=None)
  parser.add_option('-s', '--server', action='store', dest='server',
                    help='XML RPC Server URL.', metavar='<server>',
                    default=None)
  parser.add_option('--config-file', action='store', dest='config_file',
                    help='Config file location.', metavar='<file>',
                    default=None)
  parser.add_option('-u', '--username', action='store', dest='username',
                    help='Run as a different username.', metavar='<username>',
                    default=unicode(getpass.getuser()))
  parser.add_option('-p', '--password', action='store', dest='password',
                    help='Password string, NOTE: It is insecure to use this '
                         'flag on the command line.', metavar='<password>',
                    default=None)
  parser.add_option('-c', '--cred-file', action='store', dest='credfile',
                    help='Location of credential file.', metavar='<cred-file>',
                    default=None)
  parser.add_option('--cred-string', action='store', dest='credstring',
                    help='String of credential.', metavar='<cred-string>',
                    default=None)
  parser.add_option('--no-header', action='store_true', dest='no_header',
                    help='Do not display a header.', default=False)

  (globals()["options"], args) = parser.parse_args(args)

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, e:
    print 'ERROR: %s' % e
    sys.exit(1)

  if( options.success ):
    if( options.success.isdigit() ):
      options.success = int(options.success)
    else:
      cli_common_lib_instance.DnsError('--success must be a 1 or 0', 1)

  if( options.begin_time and options.end_time ):
    if( len(options.begin_time.split('T')) == 2 and
        len(options.end_time.split('T')) == 2 ):
      delimeter = 'T'
    elif( len(options.begin_time.split(' ')) == 2 and
          len(options.end_time.split(' ')) == 2 ):
      delimeter = ' '
    else:
      cli_common_lib_instance.DnsError('Improperly formatted timestamps.', 1)
    try:
      options.begin_time = datetime.datetime.strptime(
          options.begin_time, '%%Y-%%m-%%d%s%%H:%%M:%%S' % delimeter)
      options.end_time = datetime.datetime.strptime(
          options.end_time, '%%Y-%%m-%%d%s%%H:%%M:%%S' % delimeter)
    except ValueError:
      cli_common_lib_instance.DnsError('Improperly formatted timestamps.', 1)

  elif( options.begin_time or options.end_time ):
    cli_common_lib_instance.DnsError(
        'Both --begin-time and --end-time must be specified.', 1)

  log = roster_client_lib.RunFunction(
      u'ListAuditLog', options.username, credfile=options.credfile,
      credstring=options.credstring, server_name=options.server,
      kwargs={u'user_name': options.roster_user, u'action': options.action,
              u'success': options.success,
              'begin_timestamp': options.begin_time,
              'end_timestamp': options.end_time})['core_return']

  print_list = []
  if( not options.no_header ):
    print_list.append(['Action', 'Timestamp', 'Username', 'Success', 'Data'])

  for entry in log:
    date = datetime.datetime.strptime(
        entry['audit_log_timestamp'].value, "%Y%m%dT%H:%M:%S")
    print_list.append(
        [entry['action'], str(date).replace(' ', 'T'),
         entry['audit_log_user_name'], entry['success'],
         str(cPickle.loads(entry['data'])['audit_args'])])

  print cli_common_lib_instance.PrintColumns(
      print_list, first_line_header=not options.no_header)

if __name__ == "__main__":
  main(sys.argv[1:])
