#!/usr/bin/python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Make record tool for dnsmanagement"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '#TRUNK#'



import os
import sys
import getpass

from optparse import OptionParser

from roster_user_tools import cli_record_lib
from roster_user_tools import cli_common_lib
from roster_user_tools.data_flags import Record
from roster_user_tools.action_flags import List


class Args(List, Record):
  pass

def main(args):
  """Gathers command line arguments, constructs record_args_dict and
     runs ListRecords.

  Inputs:
    args: list of command line args
  """
  usage = ''
  args_instance = Args(usage)
  options = args_instance.GetOptionsObject(args)

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, e:
    print 'ERROR: %s' % e
    sys.exit(1)
  cli_record_lib_instance = cli_record_lib.CliRecordLib(cli_common_lib_instance)

  if( options.zone_name is None ):
    cli_common_lib_instance.DnsError('Must specify a zone-name with "-z".', 1)

  if( options.a ):
    record_args_dict = {'assignment_ip': options.a_assignment_ip}
    print cli_record_lib_instance.ListRecords('a', options, record_args_dict)
  if( options.aaaa ):
    record_args_dict = {'assignment_ip': options.aaaa_assignment_ip}
    print cli_record_lib_instance.ListRecords('aaaa', options, record_args_dict)
  if( options.hinfo ):
    record_args_dict = {'hardware': options.hinfo_hardware,
                        'os': options.hinfo_os}
    print cli_record_lib_instance.ListRecords('hinfo', options, record_args_dict)
  if( options.txt ):
    record_args_dict = {'quoted_text': options.txt_quoted_text}
    print cli_record_lib_instance.ListRecords('txt', options, record_args_dict)
  if( options.cname ):
    record_args_dict = {'assignment_host': options.cname_assignment_host}
    print cli_record_lib_instance.ListRecords('cname', options, record_args_dict)
  if( options.soa ):
    integer_arguments = {'--soa-serial-number': options.soa_serial_number,
                         '--soa-refresh-seconds': options.soa_refresh_seconds,
                         '--soa-retry-seconds': options.soa_retry_seconds,
                         '--soa-expiry-seconds': options.soa_expiry_seconds,
                         '--soa-minimun-seconds': options.soa_minimum_seconds}
    for argument in integer_arguments:
      if( not integer_arguments[argument].isdigit() ):
        cli_common_lib_instance.DnsError(
            '%s must be an integer, %s is not an integer. ' %
            (argument, repr(integer_arguments[argument])), 1)
    record_args_dict = {'name_server': options.soa_name_server,
                        'admin_email': options.soa_admin_email,
                        'serial_number': int(options.soa_serial_number),
                        'refresh_seconds': int(options.soa_refresh_seconds),
                        'retry_seconds': int(options.soa_retry_seconds),
                        'expiry_seconds': int(options.soa_expiry_seconds),
                        'minimum_seconds': int(options.soa_minimum_seconds)}
    print cli_record_lib_instance.ListRecords('soa', options, record_args_dict)
  if( options.srv ):
    integer_arguments = {'--srv-priority': options.srv_priority,
                         '--srv-weight': options.srv_weight,
                         '--srv-port': options.srv_port}
    for argument in integer_arguments:
      if( not integer_arguments[argument].isdigit() ):
        cli_common_lib_instance.DnsError(
            '%s must be an integer, %s is not an integer. ' %
            (argument, repr(integer_arguments[argument])), 1)
    record_args_dict = {'priority': int(options.srv_priority),
                        'weight': int(options.srv_weight),
                        'port': int(options.srv_port),
                        'assignment_host': options.srv_assignment_host}
    print cli_record_lib_instance.ListRecords('srv', options, record_args_dict)
  if( options.ns ):
    record_args_dict = {'name_server': options.ns_name_server}
    print cli_record_lib_instance.ListRecords('ns', options, record_args_dict)
  if( options.mx ):
    if( not options.mx_priority.isdigit() ):
      cli_common_lib_instance.DnsError('--mx-priority must be an integer. %s is not'
                              ' an integer.' % repr(options.mx_priority), 1)
    record_args_dict = {'priority': int(options.mx_priority),
                        'mail_server': options.mx_mail_server}
    print cli_record_lib_instance.ListRecords('mx', options, record_args_dict)
  if( options.ptr ):
    record_args_dict = {'assignment_host': options.ptr_assignment_host}
    print cli_record_lib_instance.ListRecords('ptr', options, record_args_dict)
  if( options.zone_name and not (options.a or options.aaaa or options.hinfo
                                 or options.txt or options.cname or
                                 options.soa or options.srv or options.ns
                                 or options.mx or options.ptr) ):
    for line in cli_record_lib_instance.ListRecords(None, options, None):
      print line

if __name__ == "__main__":
  main(sys.argv[1:])
