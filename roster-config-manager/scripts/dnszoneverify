#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""This script is used for verifying zone files are correctly loaded on a 
name server."""

__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '#TRUNK#'

import dns.zone
import sys
from optparse import OptionParser
from roster_config_manager import dns_query_lib
from roster_config_manager import tree_exporter
from roster_core import errors
from roster_core import core_helpers
from roster_core import config
from roster_core import constants

def main(args):
  usage = ('\n'
           '\n'
           'To test a zone file:\n'
           '\t%s -f <zone-file> -s <dns-server>\n' % (
               sys.argv[0]))

  parser = OptionParser(version='%%prog (Roster %s)' % __version__, usage=usage)

  parser.add_option('-c', '--config-file', action='store', dest='config_file',
                    help='Config File Location', metavar='<config-file>',
                    default='/etc/roster/roster_server.conf')
  parser.add_option('-p', '--port', action='store', dest='port',
                    help='Port to query DNS server on.', metavar='<port>',
                    default=53)
  parser.add_option('-i', '--id', dest='id',
                    help='ID of tarfile output from Roster tree export.',
                    metavar='<id>', action='store', dest='id', default=None)
  parser.add_option('q', action='store', dest='quiet',
                    help='Suppresses reporting.',
                    metavar='<quiet>', default=False)

  (globals()["options"], args) = parser.parse_args(args)

  if( options.id is None ):
    print 'Must specify -i/--id flag.'
    sys.exit(1)

  config_instance = config.Config(options.config_file)

  try:
    zone_file_handle = open(options.file, 'r')
    zone_file_string = zone_file_handle.read()
    zone_file_handle.close()
  except IOError as error:
    print 'Unable to read file %s: %s' % (options.file, str(error))
    sys.exit(1)

  if( '$ORIGIN' not in zone_file_string and options.zone_origin is None ):
    raise errors.UnexpectedDataError('No zone origin supplied.')
  else:
    zone = dns.zone.from_text(str(zone_file_string), check_origin=False,
        origin=options.zone_origin)

  fake_core_instance = FakeCore(db_instance)
  core_helpers_instance = core_helpers.CoreHelpers(fake_core_instance)
  record_list = core_helpers_instance.CreateRecordsFromZoneObject(zone, 
      zone_origin=options.zone_origin)

  if( options.zone_origin is None ):
    options.zone_origin = str(zone.origin)
  
  good_records, bad_records = dns_query_lib.DnsQuery(record_list, 
      options.dns_server, options.port, options.zone_origin) 

  print 'Able to verify %s records.' % len(good_records)
  print 'Unable to verify %s records.' % len(bad_records)

  if( len(bad_records) ):
    print '\nUnverifiable records:'
    for bad_record in bad_records:
      print bad_record
  
if( __name__ == "__main__" ):
  main(sys.argv[1:])
  
