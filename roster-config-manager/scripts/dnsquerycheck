#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""DNS query check tool for Roster"""

__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '#TRUNK#'

import os
import sys
import random
import dns.zone

import ConfigParser
from optparse import OptionParser
from roster_core import config
from roster_core import helpers_lib
from roster_core import errors
from roster_config_manager import dns_query_lib
from roster_config_manager import config_lib

def main(args):
  usage = ('\n'
           '\n'
           'To run a query check on a DNS server:\n'
           '\t%s [-c <config-file>] [-d <dns-server>]\n' % sys.argv[0])

  parser = OptionParser(version='%%prog (Roster %s)' % __version__, usage=usage)

  parser.add_option('-c', '--config-file', action='store', dest='config_file',
                    help='Config File Location', metavar='<config-file>',
                    default='/etc/roster/roster_server.conf')
  parser.add_option('-p', '--port', action='store', dest='port',
                    help='Port number to query DNS server on. '
                    'Defaults to 53.', metavar='<port>', default=53)
  parser.add_option('-i', '--id', dest='id',
                    help='ID of tarfile output from Roster tree export.',
                    metavar='<id>', default=None)
  parser.add_option('-n', '--number', action='store', dest='number',
                    help='Number of records to check per zone.',
                    metavar='<number>', default=5)
  parser.add_option('-q', action='store', dest='quiet',
                    help='Suppresses reporting.',
                    metavar='<quiet>', default=False)

  (globals()["options"], args) = parser.parse_args(args)

  config_instance = config.Config(options.config_file)
  config_file_root_config_dir = config_instance.config_file[
      'exporter']['root_config_dir']
  config_file_backup_dir = config_instance.config_file[
      'exporter']['backup_dir']

  if( config_file_root_config_dir.startswith('/') ):
    root_config_dir = config_file_root_config_dir
  else:
    root_config_dir = '%s/%s' % (os.getcwd(), config_file_root_config_dir)

  if( config_file_backup_dir.startswith('/') ):
    backup_dir = config_file_backup_dir
  else:
    backup_dir = '%s/%s' % (os.getcwd(), config_file_backup_dir)

  config_lib_instance = config_lib.ConfigLib() 
  tar_file_name = config_lib_instance.FindDnsTreeFilename(backup_dir, 
      options.id)

  config_lib_instance.UnTarDnsTree(backup_dir, os.getcwd(), options.id)

  server_sets =  os.listdir(root_config_dir)
  for server_set in server_sets:
    config_parser = ConfigParser.ConfigParser()
    config_parser.read('%s/%s/named/%s_config' % (
        root_config_dir, server_set, server_set))
    dns_server_address = config_parser.get('dns_server_set_parameters', 
        'dns_servers')
 
    views_dir = '%s/%s/named' % (
        root_config_dir, server_set)

    for view_name in os.listdir(views_dir):
      view_dir = '%s/%s' % (views_dir, view_name)
      if( os.path.isdir(view_dir) ):
        for zone_file in os.listdir(view_dir):
          zone_file_handle = open('%s/%s' % (view_dir, zone_file))
          zone_file_string = zone_file_handle.read()
          zone_object = dns.zone.from_text(zone_file_string, 
              check_origin=False)
          zone_file_handle.close()

          zone_records = helpers_lib.CreateRecordsFromZoneObject(zone_object,
              view_name=view_name)

          random_records = []
          for i in range(min(int(options.number), len(zone_records))):
            random_index = random.randint(0, len(zone_records) - 1)
            random_record = zone_records.pop(random_index)
            random_records.append(random_record)

          query_return =  dns_query_lib.DnsQuery(random_records, 
              dns_server_address, options.port, zone_object.origin)

          #This will probably have to change, but for testing it's fine.
          if( not options.quiet ):
            #If the length of the bad_records list in query_return is 0
            if( len(query_return[1]) == 0 ):
              print 'Zone %s appears to be online' % zone_file
            else:
              print 'Found records that do not match for zone %s' % zone_file
              for record in query_return[1]:
                print record

if __name__ == "__main__":
  main(sys.argv[1:])
